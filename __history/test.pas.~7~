unit test;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls;

type
  TStatus = (stBlue, stRed, stBlack);
  TPeak = record
    x,y:integer;
    status:TStatus;
  end;
  TPeakList = array[1..12] of TPeak;
  TForm1 = class(TForm)
    Image1: TImage;
    pnlSidebar: TPanel;
    Button1: TButton;
<<<<<<< HEAD
    procedure FormCreate(Sender: TObject);
    procedure Image1MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
=======
    Button2: TButton;
    procedure FormCreate(Sender: TObject);
    procedure Image1MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure ButtonRestartClick(Sender: TObject);
>>>>>>> 4e2bbef02194dc4b863d26a4d166e969ed0644aa
  private
    { Private declarations }
  public
    { Public declarations }
  end;
const
<<<<<<< HEAD
  x0 = 40;
  y0 = 40;
  R = 40;
  Level1:array[1..12, 1..12] of integer = ((40,80,80,40,40,40,40,40,40,40,40,40),(40,80,120,40,40,40,40,40,40,40,40,40));
var
  Form1: TForm1;
  PeakList:TPeakList;

=======
  R = 40;
  N = 12;
var
  Form1: TForm1;
  PeakList:TPeakList;
  x0,y0:integer;
>>>>>>> 4e2bbef02194dc4b863d26a4d166e969ed0644aa

implementation

{$R *.dfm}

<<<<<<< HEAD
procedure TForm1.FormCreate(Sender: TObject);
var
  i: Integer;
begin
  for i := 1 to 12 do
  begin
    PeakList[i].x := level1[1,i];
    PeakList[i].y := level1[2,i];
  end;
  Image1.Canvas.Pen.Width := 10;
  Image1.Canvas.MoveTo(PeakList[1].x, PeakList[1].y);
  for i := 2 to 12 do
  begin
    PeakList[i].x := level1[1,i];
    PeakList[i].y := level1[2,i];
    Image1.Canvas.LineTo(PeakList[i].x, PeakList[i].y);
  end;

  //Image1.Canvas.MoveTo(X0,Y0);
  //Image1.Canvas.LineTo(x0+100, y0+100);
  //Image1.Canvas.LineTo(x0+200, y0);
=======
procedure TForm1.ButtonRestartClick(Sender: TObject);
var i:integer;
begin
for i := 1 to N do
  begin
  PeakList[i].status :=stBlue;
  x0:= PeakList[i].x;
  y0:= PeakList[i].y;
  Image1.Canvas.Ellipse(x0-R,Y0-R,X0+R,Y0+R)
  end;

end;

Procedure TForm1.FormCreate(Sender: TObject);
begin
  Image1.Canvas.MoveTo(X0,Y0);
  Image1.Canvas.Pen.Width := 10;
  Image1.Canvas.LineTo(x0+100, y0+100);
  Image1.Canvas.LineTo(x0+200, y0);
>>>>>>> 4e2bbef02194dc4b863d26a4d166e969ed0644aa
  Image1.Canvas.Pen.Width := 1;
  Image1.Canvas.Brush.Color := clBlue;
  Image1.Canvas.Ellipse(x0-R,Y0-R,X0+R,Y0+R);
  Image1.Canvas.Ellipse(x0+200-R,Y0-R,X0+200+R,Y0+R);

end;

<<<<<<< HEAD
procedure TForm1.Image1MouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
=======
procedure TForm1.Image1MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var i:integer;
>>>>>>> 4e2bbef02194dc4b863d26a4d166e969ed0644aa
begin
  if (((X0-x)*(X0-x) + (Y0-y)*(Y0-y) < R*R)) then
  begin
    //ShowMessage(IntToStr(x) + ' ' + IntToStr(y));
    if  Button=mbLeft then
<<<<<<< HEAD
      Image1.Canvas.Brush.Color := clRed
    else if Button=mbRight then
      Image1.Canvas.Brush.Color := clBlack;
=======
      begin
      Image1.Canvas.Brush.Color := clRed;
      for i:=1 to N do
        begin
        if (PeakList[i].x-x)(PeakList[i].x-x) + (PeakList[i].y-y)(PeakList[i].y-y) <= R*R then
          begin
          PeakList[i].status :=stRed;
          end;
        end;
      end
    else if Button=mbRight then
      begin
        Image1.Canvas.Brush.Color := clBlack;
        for i:=1 to N do
          begin
          if (PeakList[i].x-x)(PeakList[i].x-x) + (PeakList[i].y-y)(PeakList[i].y-y) <= R*R then
            begin
            PeakList[i].status :=stBlack;
            end;
          end;
      end;
>>>>>>> 4e2bbef02194dc4b863d26a4d166e969ed0644aa
    Image1.Canvas.Ellipse(x0-R,Y0-R,X0+R,Y0+R);
  end;
end;

end.
